using System;
using System.Threading.Tasks;
using AlephVault.Unity.Meetgard.Authoring.Behaviours.Client;
using Protocols;

namespace Client.Authoring.Behaviours.Protocols
{
    public class #SCRIPTNAME# : ProtocolClientSide<#PROTOCOL#ProtocolDefinition>
    {
        // Define variables to hold senders, one for each defined
        // client message. For this generated boilerplate examples,
        // as per the #PROTOCOL#ProtocolDefinition class, you'll
        // need these examples. Work analogous to create your own
        // messages and their senders.
        //
        // private Func<Task> SendHello;
        // private Func<MyType2, Task> SendSomeTypedMessage;
        //
        // NOTES: These function references can be invoked ANYWHERE,
        // not just in the context of the incoming message handlers
        // that are defined below, as long as the protocol is ready.
        
        /// <summary>
        ///   A Post-Awake hook.
        /// </summary>
        protected override void Setup()
        {
            // This method is optional. It can be removed.
        }
        
        /// <summary>
        ///   Initializes the protocol senders once the server is ready.
        /// </summary>
        protected override void Initialize()
        {
            // This is the place to assign the initialization of
            // these message senders by calling MakeSender or
            // MakeSender<T>, depending on how the message was
            // defined in the protocol.
            //
            // SendSomeTypedMessage = MakeSender<MyType2>("SomeTypedClientMessage");
            // SendHello = MakeSender("Hello");
            //
            // You can also assign this error handler:
            // OnSendError = async (exc) { ... process an exception ... };
            //
            // That one will allow you to wrap any message send:
            //
            // await UntilSendIsDone(SendHello());
            // await UntilSendIsDone(SendSomeTypedMessage(new MyType2(...)));
            //
            // Which will capture any error by calling OnSendError(e).
        }
        
        /// <summary>
        ///   Initializes the protocol handlers once the server is ready.
        /// </summary>
        protected override void SetIncomingMessageHandlers()
        {
            // This is the place to assign handlers to incoming messages.
            // Since messages can be typed or untyped, as in the examples
            // that were generated, there are two flavors for the message
            // handling definition: typed, and untyped.
            //
            // AddIncomingMessageHandler("IntroduceYourself", async (proto) => {
            //     // Notice how this message is not typed. The only argument
            //     // is the protocol client side object itself.
            //     //
            //     // You can do what you want here, including sending messages:
            //     // _ = SendHello(); // or: await SendHello();
            //     // The difference is that, by awaiting, we ensure the message
            //     // was actually sent or an error was triggered.
            //     //
            //     // PLEASE NOTE: IF YOUR CODE INVOLVES INTERACTION WITH UNITY
            //     // COMPONENTS, THIS MUST ONLY OCCUR IN THE MAIN THREAD, and
            //     // these handlers DO NOT RUN IN THE MAIN THREAD. You can do
            //     // it by calling:
            //     //
            //     // await RunInMainThread(async () { ... the code ... });...
            //     //
            //     // Or, if waiting for it is not needed, just:
            //     //
            //     // _ = RunInMainThread(async () { ... the code ... });            
            // });
            //
            // AddIncomingMessageHandler<MyType>("SomeTypedServerMessage", async (proto, msg) => {
            //     // Notice how this message IS typed, as defined in the
            //     // protocol definition. There is a new `msg` argument.
            //     // This argument is of type MyType.
            //     //
            //     // Otherwise, this is the same as the untyped case.
            // });
        }
        
        /// <summary>
        ///   Handler for when the connection is successfully established.
        /// </summary>
        public override async Task OnConnected()
        {
            // Do what you want, including sending messages.
            // If you need to interact with Unity components,
            // use RunInMainThread in the same way it is told
            // in this example inside the incoming message
            // handlers.
        }

        /// <summary>
        ///   Handler for when the connection is terminated, be it graceful
        ///   or due to an error.
        /// </summary>
        public override async Task OnDisconnected(Exception reason)
        {
            // The server was just disconnected. Do everything
            // except attempting to send messages or access the
            // connection somehow, since it was already ended.
            //
            // If you need to interact with Unity components,
            // use RunInMainThread in the same way it is told
            // in this example inside the incoming message
            // handlers.
        }
    }
}
